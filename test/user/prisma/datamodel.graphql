type User  @r(roles: [SELF, IS_FRIEND]) @u(role: SELF) {
  id: ID! @id
  firstName: String!
    @validation(preset: "name")
  middleName: String
    @validation(preset: "name")
  lastName: String!
    @validation(preset: "name")
  email: String! @unique
    @validation(preset:"email")
    @r(role: SELF)
  username: String! @unique
    @validation(preset: "username")
  password: String!
    @validation(preset: "password")
    @ru(role: PRIVATE)
  board: Board! @relation(name: "Board", onDelete: CASCADE)
    @r(roles: [SELF, IS_FRIEND])
  friends: [User!]!
    @o(role: ACCEPT_FRIEND_REQUEST)
    @i(role: REMOVE_FRIEND)
    @r(role: [SELF, IS_FRIEND])
  posts: [Post!]! @relation(name: "Posts")
}

type FriendRequest @c(role: IS_SENDER) @rd(roles: [IS_SENDER, IS_RECIPIENT]) {
  id: ID! @id
  sender: User! @relation(name: "Sender")
    @o(roles: IS_SENDER)
  recipient: User! @relation(name: "Recipient")
    @o(role: IS_SENDER)
}

type Board {
  id: ID! @id
  owner: User! @relation(name: "Board", link: INLINE)
  posts: [Post!]! @relation(name: "BoardPosts", onDelete: CASCADE)
    @r(roles: [AUTHOR, AUTHOR_FRIEND])
}


type Post @cd(role: AUTHOR) {
  id: ID! @id
  text: String!
  board: Board! @relation(name: "BoardPosts", strategy: INLINE)
    @o(role: BOARD_OWNER)
  author: User! @relation(name: "Posts")
    @o(role: AUTHOR)
}
